<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>新手博客Github+Hexo的保姆教程</title>
    <link href="/2024/08/04/hello-world/"/>
    <url>/2024/08/04/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此博客搭建采用Github+hexo，对新手最友好最方便。</p><p>关于Github：简单理解为存储代码的仓库，它提供了一项服务 GitHub Pages，这个 GitHub Pages 可以将我们托管在 GitHub 上的一个仓库中的 html、css 和 js 代码渲染成静态页面。</p><p>关于hexo：一个快速、简洁、高效的静态博客生成器，新手要知道hexo生成的网址是本地的，只能在自己的电脑上看到。所以我们需要部署到GitHub，新手可以理解为Github为你提供一个免费的所有人可见的网址。</p><p>以下操作建议在科学上网环境下进行（国外网址访问速度慢）</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>进入node.js官网:<a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a><br>（链接点不开的话复制到浏览器打开）</p><p>首先选择 Prebuilt Installer，选择好版本安装。安装过程只需要一直next，路径不要有中文，勾选所有组件，并勾选 Add to Path 将其添加到系统环境变量。<br><img src="/imgs/node.png" alt="."></p><p>安装 Node.js 会包含环境变量以及 npm 的安装，安装后，命令行检测 Node.js 是否安装成功：</p><p>第一个命令在 nodejs 安装成功的情况下会显示 nodejs 的版本号：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ node -v<br></code></pre></td></tr></table></figure><p>第二个命令在 npm 安装成功的情况下会显示 npm 的版本号：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ npm -v<br></code></pre></td></tr></table></figure><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>进入Git官网<a href="https://git-scm.com/">https://git-scm.com/</a><br>所有操作next（选择组件界面建议不勾选最后两个），安装路径不可以出现中文<br>（链接点不开的话复制到浏览器打开）</p><p>所有环境安装成功后显示：<br><img src="/imgs/az.png"></p><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="新建Github仓库"><a href="#新建Github仓库" class="headerlink" title="新建Github仓库"></a>新建Github仓库</h3><p>前往GitHub官网，进行新用户注册:<a href="https://github.com/">https://github.com/</a><br>注册成功后登录 GitHub 账号，新建一个名为 username.github.io（这里的username是你自己的项目名的仓库）<br><img src="/imgs/sybk.png"><br><img src="/imgs/Bk.png"><br>创建成功后复制ssh地址到你的记事本，之后随时用到<br><img src="/imgs/ssh.png"></p><h2 id="本地配置安装Hexo"><a href="#本地配置安装Hexo" class="headerlink" title="本地配置安装Hexo"></a>本地配置安装Hexo</h2><p>首先在磁盘中创建一个用来存放Github本地仓库文件的目录blog(可自定义目录存放，尽量不用中文命名)</p><p>选中创建的目录(文件夹)右键选择使用Gti Bash Here打开Git命令窗口(这就是开始安装的Git工具)<br>输入命令：npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>注：之后再次使用命令则是以cnpm开头~而不是npm<br><img src="/imgs/tb.png"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$ cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$ hexo init<br></code></pre></td></tr></table></figure><p>（初始化成功后blog目录(文件夹)会多出许多文件)<br><img src="/imgs/blog.png"><br> 这时输入命令：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$ hexo s<br></code></pre></td></tr></table></figure><br>(hexo sever的缩写，作用是启动本地服务器，用于预览主题)<br>然后在浏览器输入localhost:4000即可以在本地浏览博客(自带一篇Hello World博客)<br>关闭浏览or退出操作：ctrl + c<br><img src="/imgs/hexosy.png"></p><h3 id="设置ssh"><a href="#设置ssh" class="headerlink" title="设置ssh"></a>设置ssh</h3><p>生成sshkey，首先在git下cd ~&#x2F;.ssh进入.ssh文件<br>输入命令：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$ cd ~/.ssh<br></code></pre></td></tr></table></figure><br>输入命令：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$ ssh-keygen -t rsa -C ‘注册时的邮箱地址’<br></code></pre></td></tr></table></figure><br>接着去查看C盘目录(此文件夹所在C:\用户\用户名目录下)，然后在记事本中打开id_rsa.put文件并复制生成的key<br>（id_rsa 是私钥不能泄露，id_rsa.pub 是公钥。）<br><img src="/imgs/sh.png"></p><p>在GitHub主页的头像下找到seething, 点击SSH and GPG keys，点击New SSH key<br><img src="/imgs/sag.png"><br>将刚刚在.ssh目录下所复制的id_rsa.put文件中的信息复制进key(注意空格)</p><h3 id="验证ssh"><a href="#验证ssh" class="headerlink" title="验证ssh"></a>验证ssh</h3><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</p><p>接着在本地绑定与Github的用户名和邮箱<br>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$ git config --global user.name “注册时用户名”<br></code></pre></td></tr></table></figure><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$ git config --global user.email “注册时邮箱”<br></code></pre></td></tr></table></figure><h2 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h2><p>首先找到之前创建仓库生成的Github仓库SSH地址<br>(如果没有保存点击仓库主页的Clone or download可重新查看）</p><p>打开blog文件夹下的_config.yml，将文章末尾改为以下格式：<br> <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">        type:</span> git<br><span class="hljs-symbol">        repo:</span> https:git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">        branch:</span> master<br></code></pre></td></tr></table></figure><br> branch为git仓库名，默认为master，根据自己git仓库名而定（名字很重要，git仓库名不对就连接不上github）</p><h3 id="接着安装一个上传工具"><a href="#接着安装一个上传工具" class="headerlink" title="接着安装一个上传工具"></a>接着安装一个上传工具</h3><p> 输入命令：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$  cnpm install hexo-deployer-git<br></code></pre></td></tr></table></figure><br>新建文章(不新建的话也会有一篇自带的Hello World文章)<br>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$  hexo new “文章名称”<br></code></pre></td></tr></table></figure><p>找到创建的文件位置，即可使用编辑器打开编辑文章内容。hexo s预览页面，确认无误后先生成一遍文件<br> 输入命令（hexo目录下使用git）：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$  hexo g<br></code></pre></td></tr></table></figure><br> 之后即可部署到GitHub<br> 输入命令（hexo目录下使用git）：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Git">$  hexo d<br></code></pre></td></tr></table></figure><br>部署之后可发现GitHub中多了文件，此时浏览器输入：用户名.github.io(Github仓库名)<br>能够打开hexo页面整个博客就完成了，hexo的默认页面比较简约，之后会再出一期更换主题、配置文件、更新博客文章。<br>（刚刚部署后需要一定时间加载，出现未更新等待一段时间即可）</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><h4 id="到这里整个步骤就结束了，其中的一些问题。hexo-d部署失败检查一下-config-yml配置文件的deploy。检查repository中的名字是否正确，branch的Git名是main还是mater。s"><a href="#到这里整个步骤就结束了，其中的一些问题。hexo-d部署失败检查一下-config-yml配置文件的deploy。检查repository中的名字是否正确，branch的Git名是main还是mater。s" class="headerlink" title="到这里整个步骤就结束了，其中的一些问题。hexo d部署失败检查一下_config.yml配置文件的deploy。检查repository中的名字是否正确，branch的Git名是main还是mater。s"></a>到这里整个步骤就结束了，其中的一些问题。hexo d部署失败检查一下_config.yml配置文件的deploy。检查repository中的名字是否正确，branch的Git名是main还是mater。s</h4><h4 id="每次部署之前hexo-c清理一下再部署hexo-d能避免很多问题。"><a href="#每次部署之前hexo-c清理一下再部署hexo-d能避免很多问题。" class="headerlink" title="每次部署之前hexo c清理一下再部署hexo d能避免很多问题。"></a>每次部署之前hexo c清理一下再部署hexo d能避免很多问题。</h4>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
